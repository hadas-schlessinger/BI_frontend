{"ast":null,"code":"var _jsxFileName = \"/Users/hadasch/PycharmProjects/BI/frontend/src/components/Routes.js\";\nimport React, { useState, Fragment } from 'react';\nimport beckgroungTransperant from '../beckgroungTransperant.png';\nimport decoder from '../services/ImageDecoder';\nimport { routes } from '../services/Routes';\nexport default function RoutesPanel() {\n  const [success, setSuccess] = useState(false);\n  const [img, setImg] = useState(\"no image\");\n\n  async function onSubmit(event) {\n    event.preventDefault();\n    routes().then(response => {\n      const image = response.data.data;\n      setImg(image);\n      setSuccess(true);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    style: {\n      backgroundImage: `url(${beckgroungTransperant})`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Routes Data!\")), React.createElement(\"h2\", {\n    style: {\n      fontSize: 20\n    },\n    className: \"pt-running-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"here you can view data regarding routes\"), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"see report\",\n    onClick: event => onSubmit(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), success && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"The report\"), React.createElement(\"img\", {\n    src: decoder(img),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })));\n}\n/* {!success && <div>\n <h1>Settings</h1>\n <form action=\"/generate\" method=\"post\">\n<h2>Please set parameters for your project - {props.projectName} </h2>\n        <h3>name of the compartment</h3>\n            <p>Insert the name of compartment from which cytokines were extracted, e.g., serum, nasel, etc</p>\n            <label>Name Compartment</label>\n            <input type=\"text\" name=\"name_compartment\" placeholder=\"Plasma, Nasal Wash\" onChange={event => setComperament(event.target.value)}/>\n        <h3>Luminex</h3>\n            <p> Mark this if your file is a luminex measurements file. Note - if you are using luminex directly, please make sure all value are specific.\n                if a value is not mentioned as numeric, please change it to a chosen real number  </p> \n            <input type=\"checkbox\" name=\"luminex\" onChange={event => setLuminex(event.target.value)}/>\n            <label>luminex</label>\n        <h3>Log Transformation on Cytokines Data</h3>\n            <p>Marking this will generate log transformation on the cytokine data</p>\n            <input type=\"checkbox\" name=\"log_transform\" onChange={event => setLogCytokines(event.target.value)}/>\n            <label>log transformation</label>\n        <h3>Max Number of Clusters (k)</h3>\n            <p>The maximal number of clusters that can be chosen. The defualt value is 6 clusters</p>\n            <label>Max K</label>\n            <input type=\"number\" name=\"max_testing_k\" placeholder=\"6\" onChange={event => setK(event.target.value)}/>\n        <h3>Outcomes</h3>\n            <p>Optional. Names of outcome variables from the patients data data-frame to be analyzed.\n            If list is left empty, will not perform the associations to outcomes analysis.\n            To insert more then one column, please split the column names with \", \" (i.e - outcome1, outcome2, ..., outcomeN)\n            Note - binary and continues variables should be analyzed separately (two runs, one for binary variables and one for continues variables)</p>\n            <label>Outcomes</label>\n            <input type=\"text\" name=\"outcomes\" placeholder=\"outcome variables\" onChange={event => setOutcomes(event.target.value)}/>\n        <h3> Covariates</h3>\n            <p>Optional. Names of covariate variables (columns) from the patients_data.xlsx data-frame\n            to be controlled for in the regression models. If list is left empty (i.e., []),\n            will not controll the associations to outcomes analysis with any covariate variables</p>\n            <label>Covariates</label>\n            <input type=\"text\" name=\"covariates\" placeholder=\"Age\" onChange={event => setCovariates(event.target.value)}/>\n        <h3>Patients data attributes to perform log function on</h3>\n            <p>List with names of covariate columns to be log-transformed.\n            If there are no columns you wish to transform, leave empty </p>\n            <label>Columns for log</label>\n            <input type=\"text\" name=\"log_column_names\" placeholder=\"Age\" onChange={event => setLogColumns(event.target.value)}/>\n        <h3>Cytokines to Analyze</h3>\n            <p>List of cytokines to be analyzed. If None, will analyze all cytokines in the cytokine_data file</p>\n            <label>Cytokines</label>\n             <input type=\"text\" name=\"cytokines\" placeholder=\"List of cytokines\" onChange={event => setCytokines(event.target.value)}/ >\n         \n    </form>\n    <p></p>\n        <input type=\"submit\" value=\"Submit\" onClick={(event) => onSubmit(event)}/>\n        <p>Clicking the \"Submit\" button, will start the analysis</p>\n        </div>}\n        {error && <medium className='error'>Something went wrong - please go back to the upload tab and insert your data and project name</medium>}\n        {success && <Calculating projectName = {props.projectName} formID={formID} / >   }   */","map":{"version":3,"sources":["/Users/hadasch/PycharmProjects/BI/frontend/src/components/Routes.js"],"names":["React","useState","Fragment","beckgroungTransperant","decoder","routes","RoutesPanel","success","setSuccess","img","setImg","onSubmit","event","preventDefault","then","response","image","data","catch","error","console","log","backgroundImage","fontSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAAQC,MAAR,QAAqB,oBAArB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,UAAD,CAA9B;;AAIA,iBAAeU,QAAf,CAAwBC,KAAxB,EAA+B;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACCR,IAAAA,MAAM,GAAGS,IAAT,CAAeC,QAAD,IAAY;AACnB,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAA5B;AACAP,MAAAA,MAAM,CAACM,KAAD,CAAN;AACAR,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEN,KALD,EAMCU,KAND,CAMO,UAASC,KAAT,EAAe;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KARJ;AAYA;;AAGL,SACA;AAAK,IAAA,KAAK,EAAE;AAACG,MAAAA,eAAe,EAAG,OAAMnB,qBAAsB;AAA/C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,CADZ,EAEY;AAAI,IAAA,KAAK,EAAE;AAACoB,MAAAA,QAAQ,EAAE;AAAX,KAAX;AAA2B,IAAA,SAAS,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFZ,EAKY;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,YAA3B;AAAwC,IAAA,OAAO,EAAGX,KAAD,IAAWD,QAAQ,CAACC,KAAD,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALZ,EAOaL,OAAO,IACR,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA;AAAK,IAAA,GAAG,EAAEH,OAAO,CAACK,GAAD,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CARZ,CADA;AAagB;AAChB","sourcesContent":["import React, { useState, Fragment} from 'react'\nimport beckgroungTransperant from '../beckgroungTransperant.png'\nimport decoder from '../services/ImageDecoder'\nimport {routes} from '../services/Routes'\n\nexport default function RoutesPanel() {\n    const [success, setSuccess] = useState(false)\n    const [img, setImg] = useState(\"no image\")\n  \n   \n  \n    async function onSubmit(event) {\n    event.preventDefault(); \n     routes().then((response)=>{\n            const image = response.data.data\n            setImg(image)\n            setSuccess(true)\n\n     })\n     .catch(function(error){\n            console.log(error);\n        });\n       \n        \n    \n    }\n  \n\nreturn (\n<div style={{backgroundImage: `url(${beckgroungTransperant})`}}>\n            <h1><span>Routes Data!</span></h1>\n            <h2 style={{fontSize: 20}} className=\"pt-running-text\">\n            here you can view data regarding routes\n            </h2> \n            <input type=\"submit\" value=\"see report\" onClick={(event) => onSubmit(event)}/>\n            \n            {success && \n            <Fragment>\n            <h3>The report</h3>\n            <img src={decoder(img)}></img>\n            </Fragment>}\n        </div>)}\n/* {!success && <div>\n <h1>Settings</h1>\n <form action=\"/generate\" method=\"post\">\n<h2>Please set parameters for your project - {props.projectName} </h2>\n        <h3>name of the compartment</h3>\n            <p>Insert the name of compartment from which cytokines were extracted, e.g., serum, nasel, etc</p>\n            <label>Name Compartment</label>\n            <input type=\"text\" name=\"name_compartment\" placeholder=\"Plasma, Nasal Wash\" onChange={event => setComperament(event.target.value)}/>\n        <h3>Luminex</h3>\n            <p> Mark this if your file is a luminex measurements file. Note - if you are using luminex directly, please make sure all value are specific.\n                if a value is not mentioned as numeric, please change it to a chosen real number  </p> \n            <input type=\"checkbox\" name=\"luminex\" onChange={event => setLuminex(event.target.value)}/>\n            <label>luminex</label>\n        <h3>Log Transformation on Cytokines Data</h3>\n            <p>Marking this will generate log transformation on the cytokine data</p>\n            <input type=\"checkbox\" name=\"log_transform\" onChange={event => setLogCytokines(event.target.value)}/>\n            <label>log transformation</label>\n        <h3>Max Number of Clusters (k)</h3>\n            <p>The maximal number of clusters that can be chosen. The defualt value is 6 clusters</p>\n            <label>Max K</label>\n            <input type=\"number\" name=\"max_testing_k\" placeholder=\"6\" onChange={event => setK(event.target.value)}/>\n        <h3>Outcomes</h3>\n            <p>Optional. Names of outcome variables from the patients data data-frame to be analyzed.\n            If list is left empty, will not perform the associations to outcomes analysis.\n            To insert more then one column, please split the column names with \", \" (i.e - outcome1, outcome2, ..., outcomeN)\n            Note - binary and continues variables should be analyzed separately (two runs, one for binary variables and one for continues variables)</p>\n            <label>Outcomes</label>\n            <input type=\"text\" name=\"outcomes\" placeholder=\"outcome variables\" onChange={event => setOutcomes(event.target.value)}/>\n        <h3> Covariates</h3>\n            <p>Optional. Names of covariate variables (columns) from the patients_data.xlsx data-frame\n            to be controlled for in the regression models. If list is left empty (i.e., []),\n            will not controll the associations to outcomes analysis with any covariate variables</p>\n            <label>Covariates</label>\n            <input type=\"text\" name=\"covariates\" placeholder=\"Age\" onChange={event => setCovariates(event.target.value)}/>\n        <h3>Patients data attributes to perform log function on</h3>\n            <p>List with names of covariate columns to be log-transformed.\n            If there are no columns you wish to transform, leave empty </p>\n            <label>Columns for log</label>\n            <input type=\"text\" name=\"log_column_names\" placeholder=\"Age\" onChange={event => setLogColumns(event.target.value)}/>\n        <h3>Cytokines to Analyze</h3>\n            <p>List of cytokines to be analyzed. If None, will analyze all cytokines in the cytokine_data file</p>\n            <label>Cytokines</label>\n             <input type=\"text\" name=\"cytokines\" placeholder=\"List of cytokines\" onChange={event => setCytokines(event.target.value)}/ >\n         \n    </form>\n    <p></p>\n        <input type=\"submit\" value=\"Submit\" onClick={(event) => onSubmit(event)}/>\n        <p>Clicking the \"Submit\" button, will start the analysis</p>\n        </div>}\n        {error && <medium className='error'>Something went wrong - please go back to the upload tab and insert your data and project name</medium>}\n        {success && <Calculating projectName = {props.projectName} formID={formID} / >   }   */\n\n\n\n    \n"]},"metadata":{},"sourceType":"module"}